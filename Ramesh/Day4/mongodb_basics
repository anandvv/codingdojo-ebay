Create a database called 'my_first_db'.
use my_first_db

Create students collection.
db.createCollection("students")

Each document you insert into this collection should have the following format: ({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})
Create 5 students with the appropriate info.
db.students.insert({name: "Ramesh", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}});
db.students.insert({name: "Ramesh1", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}});
db.students.insert({name: "Ramesh2", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}});
db.students.insert({name: "Ramesh3", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}});
db.students.insert({name: "Ramesh4", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}});

It is not working in 3.0
db.students.insertMany([{name: "Ramesh", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}},{name: "Ramesh1", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}},{name: "Ramesh2", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}},{name: "Ramesh3", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}},{name: "Ramesh4", home_state: "TN", lucky_number: "22", birthday: {month: 1, day: 1, year: 2011}}])

Get all students.
db.students.find()
db.students.find({})

db.students.update( { name: 'Ramesh3' }, { $set:{home_state: 'San Jose Dojo'} } )
db.students.update( { name: 'Ramesh4' }, { $set:{home_state: 'Seattle Dojo'} } )

Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).
db.students.find(
    {home_state: { $in: ['San Jose Dojo','Seattle Dojo' ] } }
)


Get all students whose lucky number is:
greater than 3
db.students.find( { lucky_number: { $gt: 3} } );

less than or equal to 10
db.students.find( { lucky_number: {  $lte: 10 } } );

between 1 and 9 (inclusive)
db.students.find( { lucky_number: { $gt: 1, $lte: 9 } } )


Add a field to each student collection called 'interests' that is an ARRAY.  It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation.
db.students.update( {},{$set: {interests:['coding','brunch','MongoDB']}},{multi:true})

Add some unique interests for each particular student into each of their interest arrays.
db.students.update({ name: "Ramesh1" },{ $push: { interests: 'Javascript' }})

Add the interest 'taxes' into someone's interest array.
db.students.update({ name: "Ramesh1" },{ $push: { interests: 'Taxes' }})

Remove the 'taxes' interest you just added.
db.students.update({ name: "Ramesh1" },{ $pop: { interests: 1 }})

Remove all students who are from California (or Washington).
db.students.remove( {$or:[{home_state:'CA'},{home_state:'WA'}] } )

Remove a student by name.
db.students.remove( {name:'Ramesh3'}  )

Remove a student whose lucky number is greater than 5 (JUST ONE)
db.students.remove( { lucky_number : "22" }, 1 )

Add a field to each student collection called 'number_of_belts' and set it to 0.
db.students.update( {},{$set: {number_of_belts:0}},{multi:true})

Increment this field by 1 for all students in Washington (Seattle Dojo).
db.students.update({ home_country: "TN" },{ $pop: { interests: 1 }})
db.students.update( {},{$set: {number_of_belts:0}},{multi:true})

Rename the 'number_of_belts' field to 'belts_earned'
Remove the 'lucky_number' field.
Add a 'updated_on' field, and set the value as the current date.